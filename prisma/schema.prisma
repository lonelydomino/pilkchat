// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  bio           String?
  location      String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Social relationships
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  reposts   Repost[]
  bookmarks Bookmark[]
  
  // Follow relationships
  followers Follows[] @relation("UserFollowers")
  following Follows[] @relation("UserFollowing")

  // Notifications
  notifications Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  content   String
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Relationships
  comments Comment[]
  likes    Like[]
  reposts  Repost[]
  bookmarks Bookmark[]

  // Media (for future implementation)
  mediaUrls String[] @default([])

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Self-referencing for nested comments
  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  // Interactions
  likes Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relationship
  postId    String?
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Repost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("reposts")
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Follows {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  followerId String
  follower   User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'like', 'comment', 'repost', 'follow'
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Reference to the related content
  relatedUserId String?
  relatedPostId String?
  relatedCommentId String?

  @@map("notifications")
} 